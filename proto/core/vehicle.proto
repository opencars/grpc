syntax = "proto3";

package core;

option go_package = "github.com/opencars/grpc/pkg/core";

import "proto/common/date.proto";

import "proto/operation/operation.proto";
import "proto/registration/registration.proto";
import "proto/vin_decoding/vin_decoding.proto";

service VehicleService {
    rpc FindByNumber(NumberRequest) returns (Result) {}
    rpc FindByVIN(VINRequest) returns (Result) {}
}

message NumberRequest {
    string number = 1;
}

message VINRequest {
    string vin = 1;
}

message Vin {
    string value                        = 1;
    vin_decoding.Vehicle vehicle        = 2;
    vin_decoding.DecodedVIN decoded_vin = 3;
}

message Vehicle {
    Vin vin                    = 1;
    common.Date first_reg_date = 2;
    string brand               = 3;
    string model               = 4;
    int32 year                 = 5;

    repeated registration.Record registrations = 6;
    repeated operation.Record operations       = 7;
    repeated Advertisement advertisements      = 8;
}

message Result {
    repeated Vehicle vehicles = 1;
}

message Advertisement {
    enum FuelType {
        FUEL_UNKNOWN      = 0;
        FUEL_GASOLINE     = 1;
        FUEL_DIESEL       = 2;
        FUEL_GAS          = 3;
        FUEL_GAS_GASOLINE = 4;
        FUEL_HYBRID       = 5;
        FUEL_ELECTRIC     = 6;
        FUEL_PROPANE      = 7;
        FUEL_METHANE      = 8;
        FUEL_OTHER        = 9;
    }

    enum GearboxType {
        GEARBOX_UKNOWN    = 0;
        GEARBOX_AUTOMATIC = 1;
        GEARBOX_MANUAL    = 2;
        GEARBOX_MANUMATIC = 3;
        GEARBOX_VARIATOR  = 4;
        GEARBOX_AMT       = 5;
        GEARBOX_OTHER     = 6;
    }

    enum WheelDriveType {
        WHEELDRIVE_UNKNOWN = 0;
        WHEELDRIVE_REAR    = 1;
        WHEELDRIVE_FRONT   = 2;
        WHEELDRIVE_ALL     = 3;
    }

    enum Category {
        CATEGORY_UNKNOWN = 0;
        CATEGORY_CAR     = 1;
        CATEGORY_TRUCK   = 2;
        CATEGORY_MOTO    = 3;
        CATEGORY_BUS     = 4;
        CATEGORY_WATER   = 5;
        CATEGORY_AIR     = 6;
        CATEGORY_CAMPER  = 7;
        CATEGORY_TRAILER = 8;
        CATEGORY_SPECIAL = 9;
    }

    enum BodyType {
        BODY_UNKNOWN     = 0;
        BODY_SEDAN       = 1;
        BODY_CROSSOVER   = 2;
        BODY_MINIVAN     = 3;
        BODY_HATCHBACK   = 4;
        BODY_WAGON       = 5;
        BODY_COUPE       = 6;
        BODY_CONVERTIBLE = 7;
        BODY_PICKUP      = 8;
        BODY_LIMOUSINE   = 9;
        BODY_LIGHTTRUCK  = 10;
        BODY_OTHER       = 11;
    }

    uint32 id                       = 1;
    string resource                 = 2;
    string brand                    = 3;
    string model                    = 4;
    Category category               = 5;
    string title                    = 6;
    bool is_verified                = 7;
    string url                      = 8;
    uint32 price                    = 9;
    repeated string image_urls      = 10;
    uint32 last_seen_at             = 11;
    uint32 published_at             = 12;
    uint32 scraped_at               = 13;
    uint32 updated_at               = 14;
    uint32 year                     = 15;
    GearboxType gearbox             = 16;
    WheelDriveType wheel_drive      = 17;
    double engine_capacity          = 18;
    FuelType fuel                   = 19;
    uint32 mileage                  = 20;
    BodyType body                   = 21;
    bool is_customs_cleared         = 22;
    string vin                      = 23;
    string registration_number_page = 24;
    uint32 id_on_resource           = 25;
}